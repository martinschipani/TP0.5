TestCase subclass: #PruebasTesteo	instanceVariableNames: 'testeo'	classVariableNames: ''	package: 'tp0.5-Test'!!PruebasTesteo commentStamp: 'algo3 4/20/2021 14:20' prior: 0!Pruebas unitarias del Testeo preventivo!!PruebasTesteo methodsFor: 'running' stamp: 'algo3 4/20/2021 14:22'!setUp	testeo := Testeo new.	testeo establecerNombre: 'Hisopado - PCR'.	testeo establecerTarifaObraSocial: 5000.	testeo establecerTarifaParticular: 7000.! !!PruebasTesteo methodsFor: 'tests' stamp: 'algo3 4/20/2021 14:21'!test04SeTesteaUnPacientePorOSYOtroParticularYTotalPagadoEs12000	" Arrange "	| paciente1 paciente2 total |		paciente1 := Paciente new.	paciente1 establecerNombre: 'Nicolás'.	testeo agregarPacienteObraSocial: paciente1.	paciente2 := Paciente new.	paciente2 establecerNombre: 'Marcio'.	testeo agregarPacienteParticular: paciente2.		testeo recibirPagoDe: 'Nicolás'.	testeo recibirPagoDe: 'Marcio'.		" Act "	total := testeo obtenerTotal.		" Assert "	self assert: total equals: 12000! !!PruebasTesteo methodsFor: 'tests' stamp: 'algo3 4/20/2021 14:41'!test07SeTesteanUnPacienteParticularYOtroPorOSYRealizanDosPagosCadaUnoYTotalPagadoEs24000	" Arrange "	| paciente1 paciente2 paciente3 total |		paciente1 := Paciente new.	paciente1 establecerNombre: 'Nicolás'.	paciente2 := Paciente new.	paciente2 establecerNombre: 'Marcio'.	paciente3 := Paciente new.	paciente3 establecerNombre: 'Nati'.	testeo agregarPacienteParticular: paciente1; agregarPacienteObraSocial: paciente2; agregarPacienteParticular: paciente3.		2 timesRepeat: [ 		testeo recibirPagoDe: 'Marcio'.  " 5000 "		testeo recibirPagoDe: 'Nati'.    " 7000 "	].		" Act "	total := testeo obtenerTotal.		" Assert "	self assert: total equals: 24000! !!PruebasTesteo methodsFor: 'tests' stamp: 'algo3 4/20/2021 14:42'!test06SeAgreganTresPacientesYSeDevuelveElConjuntoDeSusNombres	" Arrange "	| paciente1 paciente2 paciente3 nombresPacientes |		paciente1 := Paciente new.	paciente1 establecerNombre: 'Carlos'.	testeo agregarPacienteParticular: paciente1.	paciente2 := Paciente new.	paciente2 establecerNombre: 'Marcio'.	testeo agregarPacienteObraSocial: paciente2.	paciente3 := Paciente new.	paciente3 establecerNombre: 'Pablo'.	testeo agregarPacienteParticular: paciente3.		" Act "	nombresPacientes := testeo obtenerNombresPacientes.		" Assert "			self assertCollection: nombresPacientes		equals: (OrderedCollection withAll: #('Carlos' 'Marcio' 'Pablo'))! !!PruebasTesteo methodsFor: 'tests' stamp: 'algo3 4/20/2021 14:47'!test11SeAgreganDosPacientesParticularesYOtroPorOSYRealizanSietePagosYLaCantidadPagadaPorElSegundoPacienteParticularEs14000	" Arrange "	| paciente1 paciente2 paciente3 cantidadPagada |		paciente1 := Paciente new.	paciente1 establecerNombre: 'Carlos'.	paciente2 := Paciente new.	paciente2 establecerNombre: 'Marcio'.	paciente3 := Paciente new.	paciente3 establecerNombre: 'Pablo'.	testeo agregarPacienteParticular: paciente1; agregarPacienteObraSocial: paciente2; agregarPacienteParticular: paciente3.		2 timesRepeat: [ 		testeo recibirPagoDe: 'Carlos'. " 7000 "		testeo recibirPagoDe: 'Marcio'. " 5000 "	].	2 timesRepeat: [ 		testeo recibirPagoDe: 'Pablo'.  " 7000 "	].		" Act "	cantidadPagada := testeo cantidadPagadaPor: 'Pablo'.		" Assert "	self assert: cantidadPagada equals: 14000! !!PruebasTesteo methodsFor: 'tests' stamp: 'algo3 4/20/2021 14:50'!test05SeTesteanTresPacientesParticularesYLaCantidadDePacientesEsTres	" Arrange "	| paciente1 paciente2 paciente3 cantidadDePacientes |		paciente1 := Paciente new.	paciente1 establecerNombre: 'Carlos'.	testeo agregarPacienteParticular: paciente1.	paciente2 := Paciente new.	paciente2 establecerNombre: 'Marcio'.	testeo agregarPacienteParticular: paciente2.		paciente3 := Paciente new.	paciente3 establecerNombre: 'Pablo'.	testeo agregarPacienteParticular: paciente3.		" Act "	cantidadDePacientes := testeo obtenerCantidadDePacientes.		" Assert "	self assert: cantidadDePacientes equals: 3! !